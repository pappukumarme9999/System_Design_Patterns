Abstract Factory Pattern


Intent:
Abstract Factory is a creational design pattern that Provides an interface for creating families of related or dependent objects without specifying their concrete classes.

Use Case:
When you want to create a group of related objects, and the concrete types of those objects vary, but they must all adhere to a common theme.

Real-Life Example:
Imagine you are designing a furniture store. Depending on the style (Modern, Victorian), you will need a consistent set of furniture, such as chairs and tables.


Real-Life Application:
UI Themes: Creating themed components like buttons, windows, and sliders that adhere to a specific look and feel (e.g., dark mode vs. light mode).
Cross-platform Libraries: Libraries that generate UI elements for different platforms (Windows, macOS, Linux) using abstract factories.


Families:
Modern Furniture Family: This includes the modern style of Chair and Table.
Victorian Furniture Family: This includes the Victorian style of Chair and Table.


Objects:

Modern Family Objects:
ModernChair: A chair with modern styling.
ModernTable: A table with modern styling.

Victorian Family Objects:
VictorianChair: A chair with Victorian styling.
VictorianTable: A table with Victorian styling.


By organizing the products into families, Abstract Factory allows you to ensure that the client only works with objects that are part of the same "family" (i.e., style), avoiding mismatches (like accidentally combining a modern chair with a Victorian table).



How to Implement

Map out a matrix of distinct product types versus variants of these products.

Declare abstract product interfaces for all product types. Then make all concrete product classes implement these interfaces.

Declare the abstract factory interface with a set of creation methods for all abstract products.

Implement a set of concrete factory classes, one for each product variant.

Create factory initialization code somewhere in the app. It should instantiate one of the concrete factory classes, depending on the application configuration or the current environment. Pass this factory object to all classes that construct products.

Scan through the code and find all direct calls to product constructors. Replace them with calls to the appropriate creation method on the factory object.


Pros 
 Encapsulates product creation logic.

 You can be sure that the products youâ€™re getting from a factory are compatible with each other.

 You avoid tight coupling between concrete products and client code.
 
 Single Responsibility Principle. 
 You can extract the product creation code into one place, making the code easier to support.

 Open/Closed Principle. You can introduce new variants of products without breaking existing client code.

Cons
 The code may become more complicated than it should be, since a lot of new interfaces and classes are introduced along with the pattern.



Relations with Other Patterns

Many designs start by using Factory Method (less complicated and more customizable via subclasses) and evolve toward Abstract Factory, Prototype, or Builder (more flexible, but more complicated).

Builder focuses on constructing complex objects step by step. Abstract Factory specializes in creating families of related objects. Abstract Factory returns the product immediately, whereas Builder lets you run some additional construction steps before fetching the product.

Abstract Factory classes are often based on a set of Factory Methods, but you can also use Prototype to compose the methods on these classes.

Abstract Factory can serve as an alternative to Facade when you only want to hide the way the subsystem objects are created from the client code.

You can use Abstract Factory along with Bridge. This pairing is useful when some abstractions defined by Bridge can only work with specific implementations. In this case, Abstract Factory can encapsulate these relations and hide the complexity from the client code.

Abstract Factories, Builders and Prototypes can all be implemented as Singletons.