Singleton Pattern


Intent:
Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.

Use Case:
When you need to manage a single instance of a class for the entire application, such as logging, configuration settings, or database connections.

Real-Life Example:
Imagine a printer in an office. Everyone needs to use the same printer, and we don’t want multiple instances of the printer being used at the same time.

Real-Life Application:
Database Connection Pooling: Only one instance of a database connection pool is created to manage all connections in the application.
Logger Classes: There should be one log file written to by the entire system, avoiding multiple log instances.


How to Implement
Add a private static field to the class for storing the singleton instance.

Declare a public static creation method for getting the singleton instance.

Implement “lazy initialization” inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.

Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.

Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static creation method.



Pros 
 You can be sure that a class has only a single instance.
 You gain a global access point to that instance.
 The singleton object is initialized only when it’s requested for the first time.

Cons
 Violates the Single Responsibility Principle. The pattern solves two problems at the time.

 The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other.

 The pattern requires special treatment in a multithreaded environment so that multiple threads won’t create a singleton object several times.

 It may be difficult to unit test the client code of the Singleton because many test frameworks rely on inheritance when producing mock objects. Since the constructor of the singleton class is private and overriding static methods is impossible in most languages, you will need to think of a creative way to mock the singleton. Or just don’t write the tests. Or don’t use the Singleton pattern.



Relations with Other Patterns

The Singleton pattern is often used in conjunction with the Factory pattern to create a factory that returns a singleton

A Facade class can often be transformed into a Singleton since a single facade object is sufficient in most cases.

Flyweight would resemble Singleton if you somehow managed to reduce all shared states of the objects to just one flyweight object. But there are two fundamental differences between these patterns:

There should be only one Singleton instance, whereas a Flyweight class can have multiple instances with different intrinsic states.
The Singleton object can be mutable. Flyweight objects are immutable.
Abstract Factories, Builders and Prototypes can all be implemented as Singletons.