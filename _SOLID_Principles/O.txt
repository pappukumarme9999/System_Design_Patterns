2. Open/Closed Principle (OCP)


Definition: This principle states that “Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification”, meaning you should be able to add new functionality/behavior without changing existing code.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Example: Shape Area Calculation
----------------------------------------------------------------------------------------------------------------------------------------------------------------

Non-SOLID: A Shape class with multiple if-else conditions to handle different shapes.

class Shape {                                                                       |public class AreaCalculator(){
    public double calculateArea(String shapeType, double... dimensions) {           |  public double area(Shape shape){
        if ("circle".equals(shapeType)) {                                           |    double areaOfShape;
            return Math.PI * dimensions[0] * dimensions[0];                         |    if(shape instanceof Square){
        } else if ("rectangle".equals(shapeType)) {                                 |        // calculate the area of Square
            return dimensions[0] * dimensions[1];                                   |    } else if(shape instanceof Circle){
        }                                                                           |        // calculate the area of Circle
        return 0;                                                                   |    }
    }                                                                               |    return areaOfShape;
}                                                                                   |  }


Problem: Every time a new shape is added (e.g., triangle), the Shape class must be modified.

----------------------------------------------------------------------------------------------------------------------------------------------------------------


SOLID Code:

// Shape.java
abstract class Shape {
    public abstract double calculateArea();
}

// Circle.java
class Circle extends Shape {
    private double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    @Override
    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

// Rectangle.java
class Rectangle extends Shape {
    private double width;
    private double height;

    public Rectangle(double width, double height) {
        this.width = width;
        this.height = height;
    }

    @Override
    public double calculateArea() {
        return width * height;
    }
}


Solution: Now, we can extend the Shape class by creating new shape classes (e.g., Circle, Rectangle).
This avoids modifying the original code when adding new shapes.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

